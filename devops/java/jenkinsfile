pipeline {
  agent {
    node {
      label 'maven'
    }

  }
  stages {
    stage('拉取Gitee代码') {
      agent none
      steps {
        git(url: 'https://gitee.com/zkturing/tslsmartfc.git', changelog: true, poll: false, credentialsId: 'gitee', branch: '3.9')
      }
    }

    stage('建造docker镜像') {
      agent none
      steps {
        container('maven') {
          sh '''mvn -gs settings.xml clean 
mvn -gs settings.xml  -fn  install -DskipTests -Pdev
cd $APP_NAME/turingcloud-safety-biz
pwd
docker build -f Dockerfile  -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BUILD_NUMBER .'''
          withCredentials([usernamePassword(credentialsId : 'harbor-2021' ,usernameVariable : 'DOCKER_USERNAME' ,passwordVariable : 'DOCKER_PASSWORD' ,)]) {
            sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
            sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BUILD_NUMBER'
            sh 'docker tag $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest'
            sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest'
          }

        }

      }
    }

    stage('发布到测试线') {
      agent none
      steps {
        kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'tsl-kubeconfig', configs: 'devops/host-cluster/test/**')
      }
    }
stage('发布本地测试线') {
      agent none
      steps {
        container('maven') {
          withCredentials([kubeconfigContent(credentialsId : 'gs-config' ,variable : 'KUBECONFIG_CONTENT' ,)]) {
            sh '''mkdir ~/.kube
echo "$KUBECONFIG_CONTENT" > ~/.kube/config
envsubst < devops/host-cluster/gstest/pod-test.yaml | kubectl  apply -f -'''
          }

        }

      }
    }
    stage('测试主管审核-发布到saas线') {
      steps {
        input(message: '@duanqq ', submitter: 'duanqq')
      }
    }

    stage('发布到saas线') {
      steps {
        kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'huawei-saas-kubeconfig', configs: 'devops/huawei-saas-cluster/**')
      }
    }

    stage('测试主管审核-发布到所有线') {
      steps {
        input(message: '@duanqq', submitter: 'duanqq')
      }
    }

    stage('default-2') {
      parallel {
        stage('发布至host集群和华为云saas集群') {
          steps {
            kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'tsl-kubeconfig', configs: 'devops/host-cluster/sd/**')
            kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'tsl-kubeconfig', configs: 'devops/host-cluster/tzj/**')
            kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'tsl-kubeconfig', configs: 'devops/host-cluster/whrr/**')
            kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'huawei-saas-kubeconfig', configs: 'devops/huawei-saas-cluster/**')
          }
        }

        stage('发布到特斯联集群') {
          steps {
            kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'tsl-ns-kubeconfig', configs: 'devops/tsl-cluster/**')
          }
        }

        stage('发布到中天网信集群') {
          when {
            environment name: 'continue', value: '1'
          }
          steps {
            kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'ztwx-kubeconfig', configs: 'devops/ztwx-cluster/**')
          }
        }

      }
    }

  }
}